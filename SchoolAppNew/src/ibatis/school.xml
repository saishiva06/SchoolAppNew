<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"  "http://www.iBATIS.com/dtd/sql-map-2.dtd">

<sqlMap>

	<resultMap id="Student" class="com.shiva.entity.Student">
	    <result property="sNo" column="s_no" />
		<result property="rollno" column="roll_num" />
		<result property="admissionNo" column="admission_num" />
		<result property="studentFirstName" column="student_fisrt_name" />
		<result property="studentLastName" column="student_last_name" />
		<result property="studentClass" column="student_class" />
		<result property="section" column="section" />
		<result property="medium" column="medium" />
		<result property="studentFatherName" column="student_father_name" />
		<result property="studentMotherName" column="student_mother_name" />
		<result property="dob" column="student_dob" />
		<result property="caste" column="student_caste" />
		<result property="subCaste" column="sub_caste" />
		<result property="religion" column="student_religion" />
		<result property="phoneNumber" column="student_phone_num" />
		<result property="village" column="student_village" />
		<result property="gender" column="student_gender" />
		<result property="fees" column="fees" />
		<result property="doj" column="student_doj" />
		<result property="status" column="student_status" />
		<result property="mole" column="student_moles" />
	</resultMap>
	
	<resultMap id="Teacher" class="com.shiva.entity.Teacher">
	    <result property="teacherId" column="teacher_id" />
		<result property="firstName" column="teacher_fisrt_name" />
		<result property="lastName" column="teacher_last_name" />
		<result property="qualification" column="teacher_qualification" />
		<result property="profQualification" column="prof_qualification" />
		<result property="exp" column="teacher_exp" />
		<result property="subject" column="teacher_subject" />
		<result property="dob" column="teacher_dob" />
		<result property="caste" column="teacher_caste" />
		<result property="subCaste" column="sub_caste" />
		<result property="phoneNumber" column="teacher_phone_num" />
		<result property="village" column="teacher_village" />
		<result property="gender" column="teacher_gender" />
		<result property="doj" column="teacher_doj" />
		<result property="status" column="teacher_status" />
	</resultMap>


<resultMap id="FeeDetails" class="com.shiva.entity.FeeDetails">
	    <result property="recieptNo" column="recipt_no" />
		<result property="rollNo" column="roll_no" />
		<result property="studentName" column="student_name" />
		<result property="studentClass" column="student_class" />
		<result property="feeType" column="fee_type" />
		<result property="otherFee" column="fee_paid" />
		<result property="feePayDate1" column="fee_pay_date_1" />
	</resultMap>


<resultMap id="ExamResults" class="com.shiva.entity.ExamResults">
		<result property="examResultsId" column="exam_results_id" />
		<result property="rollNum" column="roll_num" />
		<result property="studentName" column="student_name" />
		<result property="studentClass" column="student_class" />
		<result property="examTitle" column="exam_title" />
		<result property="examDate" column="exam_date" />
		<result property="telugu1" column="telugu_1" />
		<result property="telugu2" column="telugu_2" />
		<result property="hindi1" column="hindi_1" />
		<result property="hindi2" column="hindi_2" />
		<result property="english1" column="english_1" />
		<result property="english2" column="english_2" />
		<result property="maths1" column="maths_1" />
		<result property="maths2" column="maths_2" />
		<result property="science1" column="science_1" />
		<result property="science2" column="science_2" />
		<result property="social1" column="social_1" />
		<result property="social2" column="social_2" />
		<result property="computers" column="computers" />
		<result property="arts" column="arts" />
		<result property="others" column="others" />
		<result property="total" column="total" />
		<result property="grade" column="grade" />
		<result property="rank" column="rank" />
	</resultMap>
	
	<resultMap id="StudentByClass" class="com.shiva.entity.StudentByClass">
		<result property="studentClass" column="student_class" />
		<result property="count" column="count"/>
		</resultMap>
		
		<resultMap id="BudgetDetails" class="com.shiva.entity.BudgetDetails">
	    <result property="budgetId" column="budget_id" />
	     <result property="recieptNo" column="reciept_no" />
		<result property="budgetName" column="budget_name" />
		<result property="budgetCost" column="budget_cost" />
		<result property="budgetBy" column="budget_by" />
		<result property="budgetDate" column="budget_date" />
		<result property="budgetType" column="budget_type" />
		<result property="other" column="other" />
	</resultMap>
	
	<resultMap id="News" class="com.shiva.entity.News">
	    <result property="newsId" column="news_id" />
	     <result property="newsHeadLine" column="news_headline" />
		<result property="newsDesc" column="news_description" />
		<result property="newsDate" column="news_date" />
		<result property="other" column="other" />
	</resultMap>
	
	<resultMap id="ComplaintBox" class="com.shiva.entity.ComplaintBox">
	    <result property="cbId" column="cb_id" />
	     <result property="perName" column="per_name" />
		<result property="perPhone" column="per_phone" />
		<result property="perMail" column="per_mail" />
		<result property="cbDate" column="cb_date" />
		<result property="cbDesc" column="cb_desc" />
	</resultMap>
		
	<!-- UserDao -->
	
	<insert id="addCompalint" parameterClass="java.util.Map">
		insert into complaint_box(per_name,per_phone,per_mail, cb_date, cb_desc) values (#per_name#,#per_phone#,#per_mail#,#cb_date#, #cb_desc#)
		<selectKey resultClass="int" keyProperty="id">
			select
			last_insert_id() as id
		</selectKey>
	</insert>
	<insert id="addNews" parameterClass="java.util.Map">
		insert into news(news_headline,news_desc,other, news_date) values (#news_headline#,#news_desc#,#other#,#news_date#)
		<selectKey resultClass="int" keyProperty="id">
			select
			last_insert_id() as id
		</selectKey>
	</insert>
    
	<select id="authenticateUser" parameterClass="java.util.Map"
		resultClass="string">
		select u.u_id from user u where u.u_login=#u_login# and
		u_password=#u_password#
	</select>
	
	<update id="updatePassword" parameterClass="java.util.Map">
		update user set u_password = #u_password# where u_login=#u_login#
	</update>
	
	<!-- TeacherDao -->

	<insert id="createTeacher" parameterClass="java.util.Map">
		insert into teacher(teacher_id, teacher_fisrt_name,teacher_last_name,
		teacher_qualification, prof_qualification, teacher_exp, teacher_subject,
		teacher_dob,
		teacher_caste,sub_caste, teacher_phone_num, teacher_village,
		teacher_gender,teacher_doj, teacher_status) values (#teacher_id#,
		#teacher_fisrt_name#,#teacher_last_name#, #teacher_qualification#,#prof_qualification#,
		#teacher_exp#,
		#teacher_subject#, #teacher_dob#, #teacher_caste#,#sub_caste#,
		#teacher_phone_num#, #teacher_village#, #teacher_gender#, #teacher_doj#,
		#teacher_status#)
		<selectKey resultClass="int" keyProperty="id">
			select
			last_insert_id() as id
		</selectKey>
	</insert>
	
	<select id="getTeachers" resultMap="Teacher">
		select t.* from teacher t;
	</select>
	
	<delete id="deleteTeacher">
		delete from teacher where teacher_id=#teacher_id#
	</delete>
	
	<select id="getTeacherById" parameterClass="string" resultMap="Teacher">
		select t.* from teacher t where t.teacher_id=#teacher_id#;
	</select>
	
	<update id="updateTeacherMap" parameterClass="java.util.Map">
		update teacher t set  t.teacher_fisrt_name=#teacher_fisrt_name#, t.teacher_last_name=#teacher_last_name#, t.teacher_qualification=#teacher_qualification#, t.prof_qualification=#prof_qualification#, t.teacher_exp=#teacher_exp#, t.teacher_subject=#teacher_subject#, t.teacher_dob=#teacher_dob#, t.teacher_caste=#teacher_caste# ,t.sub_caste = #sub_caste#, t.teacher_phone_num=#teacher_phone_num#, t.teacher_village=#teacher_village#, t.teacher_gender=#teacher_gender#, t.teacher_doj=#teacher_doj#, t.teacher_status=#teacher_status# where t.teacher_id=#teacher_id#
	</update>
	
	<!-- StudentDao -->

	<select id="isStudentExists" parameterClass="string"
		resultClass="int">
		select s_no from Student where admission_num=#admission_num#
	</select>

	<insert id="createStudent" parameterClass="java.util.Map">
		insert into student(roll_num,admission_num,student_fisrt_name,student_last_name,student_class, section, medium, student_father_name,student_mother_name,student_dob,student_caste,sub_caste,student_religion,student_phone_num,student_village,student_gender,fees,student_doj,student_status,student_moles) values (#roll_num#,#admission_num#,#student_fisrt_name#,#student_last_name#,#student_class#,#section#,#medium#,#student_father_name#,#student_mother_name#,#student_dob#,#student_caste#, #sub_caste#, #student_religion#,#student_phone_num#,#student_village#,#student_gender#,#fees#,#student_doj#,#student_status#, #student_moles#)
		<selectKey resultClass="int" keyProperty="id">
			select
			last_insert_id() as id
		</selectKey>
	</insert>

	<delete id="deleteAllStudents">
		delete from Student where u_id not in (0, 10, 100,
		1000) and u_mgr_id not in (10, 1000)
	</delete>

	<select id="getStudents" resultMap="Student">
		select s_no,roll_num,admission_num,student_fisrt_name,student_last_name,student_class, section, medium, student_father_name,student_mother_name,date_format(student_dob, '%d-%m-%Y') as student_dob,student_caste,sub_caste,student_religion,student_phone_num,student_village,student_gender,fees,date_format(student_doj, '%d-%m-%Y') as student_doj,student_status,student_moles from student;
	</select>

	<select id="getStudentByStudentname" parameterClass="string"
		resultMap="Student">
		select *, aes_decrypt(u_password, u_login) as u_pwd,
		aes_decrypt(u_ssn, u_login) as u_s_ssn from Student where
		u_login=#u_login#
	</select>

	<select id="getStudentById" parameterClass="int" resultMap="Student">
		select s.* from student s where s_no=#s_no#
	</select>
  
   <select id="getLastRecordRollNum" parameterClass="string" resultClass="string">
	        select roll_num from student where student_class=#student_class# ORDER BY s_no DESC LIMIT 1;
	</select>
	
	<select id="getLastRecordAdmNum"  resultClass="string">
	       SELECT admission_num FROM student WHERE s_no IN (SELECT MAX(s_no) FROM student WHERE admission_num != '-')
	</select>
	
	<select id="getStudentCountByClass" resultMap="StudentByClass">
		SELECT student_class,COUNT(*) as count FROM student GROUP BY student_class order by student_class;
     </select>

	<select id="getStudentsMap" resultClass="java.util.HashMap">
		select *,
		aes_decrypt(u_password, u_login) as u_pwd, aes_decrypt(u_ssn, u_login)
		as u_s_ssn from Student where u_id not in (0, 10, 100, 1000) and
		u_mgr_id not in (10, 1000)
	</select>


	<select id="getStudentMap" parameterClass="String" resultClass="java.util.HashMap">
		select *, aes_decrypt(u_password, u_login) as u_pwd,
		aes_decrypt(u_ssn, u_login) as u_s_ssn from Student where
		u_login=#u_login#
	</select>

	<update id="updateStudentMap" parameterClass="java.util.Map">
	update student s set  s.student_fisrt_name=#student_fisrt_name#, s.student_last_name=#student_last_name#, s.student_class=#student_class#, s.section=#section#, s.medium=#medium#, s.student_father_name=#student_father_name#, s.student_mother_name=#student_mother_name#, s.student_dob=#student_dob#, s.student_caste=#student_caste# ,s.sub_caste = #sub_caste#, s.student_religion=#student_religion#, s.student_phone_num=#student_phone_num#, s.student_village=#student_village#, s.student_gender=#student_gender#, s.fees=#fees#, s.student_doj=#student_doj#, s.student_status=#student_status#, s.student_moles =#student_moles# where s.s_no=#s_no#
		</update>

     <delete id="deleteStudent">
		delete from student where s_no=#s_no#
	 </delete>
	 
	 <select id="getStudentByAdmissionNum" parameterClass="string" resultMap="Student">
		select s.* from student s where admission_num=#admNo#
	</select>
	
	<select id="getStudentByRollNum" parameterClass="string" resultMap="Student">
		select * from student  where roll_num = #rollNo#
	</select>
	
	 <select id="getTotalFee" resultClass="string">
	        select sum(fees) from student
	</select>
	
	 <!-- FeeDao -->
	 <insert id="createFeeDetails" parameterClass="java.util.Map">
		insert into fee_details(recipt_no,roll_no,student_name, student_class, fee_type, fee_paid,fee_pay_date_1) values (#recipt_no#,#roll_no#,#student_name#, #student_class#, #fee_type#, #fee_paid#,#fee_pay_date_1#)
		<selectKey resultClass="int" keyProperty="id">
			select
			last_insert_id() as id
		</selectKey>
	</insert>
	
	<select id="getFeeDetailsMap" resultMap="FeeDetails">
		SELECT recipt_no,roll_no,student_name,student_class,fee_type,fee_paid, DATE_FORMAT(fee_pay_date_1,'%d-%m-%Y') AS fee_pay_date_1 FROM fee_details;
	</select>
	<select id="getFeeDetailsById" parameterClass="string" resultMap="FeeDetails">
		select f.* from fee_details f where f.recipt_no=#reciptId#;
	</select>
	
    <update id="updateFeeDetails" parameterClass="java.util.Map">
		update fee_details f set f.student_name=#student_name#, f.student_class=#student_class#, f.fee_type=#fee_type#, f.fee_paid=#fee_paid#,f.fee_pay_date_1=#fee_pay_date_1# where recipt_no =#recipt_no#
	</update>
	<delete id="deleteFeeDetails">
		delete from fee_details where recipt_no =#recieptId#
	</delete>
	
	<select id="getAllFeeDetailsBySearch" parameterClass="java.util.Map" resultMap="FeeDetails">
		select f.* from fee_details f where (f.student_name=#student_name#) OR  (f.student_class=#student_class#) OR (f.roll_no=#roll_no#)
	</select>
	
	<select id="getTotalPaidFee" resultClass="string">
	        select sum(fee_paid) from fee_details
	</select>
	
	<!-- ExamResultsDao -->
	
	<insert id="createResult" parameterClass="java.util.Map">
		insert into exam_results(roll_num, student_name,student_class,exam_title, exam_date, telugu_1,telugu_2,hindi_1,hindi_2,english_1,english_2,maths_1,maths_2,science_1,science_2,social_1,social_2,computers, arts, others,total,rank, grade) values (#roll_num#, #student_name#,#student_class#,#exam_title#, #exam_date#, #telugu_1#,#telugu_2#,#hindi_1#,#hindi_2#,#english_1#,#english_2#,#maths_1#,#maths_2#,#science_1#,#science_2#,#social_1#,#social_2#,#computers#, #arts#, #others#,#total#,#rank#, #grade#)
		<selectKey resultClass="int" keyProperty="id">
			select
			last_insert_id() as id
		</selectKey>
	  </insert>

     <select id="getExamResultsMap" resultMap="ExamResults">
		select exam_results_id,roll_num, student_name,student_class,exam_title,telugu_1,telugu_2,hindi_1,hindi_2,english_1,english_2,maths_1,maths_2,science_1,science_2,social_1,social_2,computers, arts, others,total,rank, grade, date_format(exam_date, '%d-%m-%Y') as exam_date from exam_results;
	</select>
	
	<select id="getExamResultsById" parameterClass="string" resultMap="ExamResults">
		select * from exam_results  where exam_results_id=#examResultsId#;
	</select>
	
    <update id="updateResults" parameterClass="java.util.Map">
		update exam_results e set e.roll_num =#roll_num#, e.student_name=#student_name#,e.student_class=#student_class#,e.exam_title=#exam_title#,e.exam_date=#exam_date#,e.telugu_1=#telugu_1#,e.telugu_2=#telugu_2#,e.hindi_1=#hindi_1#,e.hindi_2=#hindi_2#,
		e.english_1=#english_1#,e.english_2=#english_2#,e.maths_1=#maths_1#,e.maths_2=#maths_2#,e.science_1=#science_1#,e.science_2=#science_2#,e.social_1=#social_1#,e.social_2=#social_2#,
		e.computers=#computers#,e.arts=#arts#,e.others=#others#,e.total=#total#,e.rank=#rank#, e.grade=#grade# where e.exam_results_id =#exam_results_id#
	</update>
	
	<delete id="deleteExamResults">
		delete from exam_results where exam_results_id =#examResultsId#
	</delete>

   <select id="getAllResultsBySearch" parameterClass="java.util.Map" resultMap="ExamResults">
		select e.* from exam_results e where (e.student_name=#student_name#) OR ( (e.student_class=#student_class#) and (e.roll_num=#roll_no#) and (e.exam_title=#exam_title#))  
	</select>
	
	 <!-- BudgetDao -->
	 <insert id="createBudgetDetails" parameterClass="java.util.Map">
		insert into budget_details(reciept_no,budget_name,budget_cost, budget_by, budget_date, budget_type,other) values (#reciept_no#,#budget_name#,#budget_cost#, #budget_by#, #budget_date#, #budget_type#,#other#)
		<selectKey resultClass="int" keyProperty="id">
			select
			last_insert_id() as id
		</selectKey>
	</insert>
	
	<select id="getBudgetDetailsMap" resultMap="BudgetDetails">
		select budget_id,reciept_no,budget_name,budget_cost, budget_by, date_format(budget_date, '%d-%m-%Y') as budget_date, budget_type,other from budget_details;
	</select>
	<select id="getBudgetDetailsById" parameterClass="integer" resultMap="BudgetDetails">
		select b.* from budget_details b where b.budget_id=#budget_id#;
	</select>
	
    <update id="updateBudgetDetails" parameterClass="java.util.Map">
		update budget_details b set  b.budget_cost=#budget_cost#, b.reciept_no =#reciept_no#, b.budget_by=#budget_by#, b.budget_date=#budget_date#, b.other= #other# where b.budget_id =#budget_id#
	</update>
	<delete id="deleteBudgetDetails">
		delete from budget_details where budget_id =#budget_id#
	</delete>
	
	<select id="getAllBudgetDetailsBySearch" parameterClass="java.util.Map" resultMap="BudgetDetails">
		select f.* from budget_details f where (f.budget_name=#budget_name#) OR  (f.student_class=#student_class#) OR (f.roll_no=#roll_no#)
	</select>
	
	<select id="getTopExpensesDetailsMap" resultMap="BudgetDetails">
		select budget_id,reciept_no,budget_name,budget_cost, budget_by, date_format(budget_date, '%d-%m-%Y') as budget_date, budget_type,other from budget_details where budget_type='debited' order by budget_cost desc limit 5;
	</select>
	
	<select id="getRecentExpensesDetailsMap" resultMap="BudgetDetails">
		select budget_id,reciept_no,budget_name,budget_cost, budget_by, date_format(budget_date, '%d-%m-%Y') as budget_date, budget_type,other from budget_details where budget_type='debited' order by budget_id desc limit 5;
	</select>
	
</sqlMap>